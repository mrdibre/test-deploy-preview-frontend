name: ECS Preview Environment Action

on:
  workflow_call:
    inputs:
      state:
        description: 'Action to perform: upsert or teardown'
        required: true
        type: string
      preview_id:
        description: 'Unique identifier for the preview environment (usually branch name)'
        required: true
        type: string
      be_branch:
        description: 'Backend branch to deploy (optional, defaults to preview_id)'
        required: false
        type: string
      ecr_repo_frontend:
        description: 'ECR repository URL for frontend'
        required: true
        type: string
      ecr_repo_backend:
        description: 'ECR repository URL for backend'
        required: true
        type: string
      aws_region:
        description: 'AWS region'
        required: true
        type: string
      role_to_assume:
        description: 'AWS IAM role ARN to assume'
        required: true
        type: string
      cluster_arn:
        description: 'ECS cluster ARN'
        required: true
        type: string
      alb_listener_https_arn:
        description: 'ALB HTTPS listener ARN'
        required: true
        type: string
      hosted_zone_id:
        description: 'Route53 hosted zone ID'
        required: true
        type: string
      domain:
        description: 'Base domain for preview environments'
        required: true
        type: string
      cpu:
        description: 'CPU units for Fargate task'
        required: false
        type: string
        default: '512'
      memory:
        description: 'Memory in MiB for Fargate task'
        required: false
        type: string
        default: '1024'
      frontend_port:
        description: 'Frontend container port'
        required: false
        type: string
        default: '80'
      backend_port:
        description: 'Backend container port'
        required: false
        type: string
        default: '80'

permissions:
  id-token: write
  contents: read

jobs:
  preview-env:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role_to_assume }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Enable Corepack
        run: corepack enable

      - name: Build and push frontend image
        if: inputs.state == 'upsert'
        run: |
          cd frontend
          # Extract repo name from full ECR URL
          REPO_NAME=$(echo "${{ inputs.ecr_repo_frontend }}" | sed 's|.*/||')
          
          # Build image
          docker build -t $REPO_NAME:${{ inputs.preview_id }} .
          
          # Tag and push
          docker tag $REPO_NAME:${{ inputs.preview_id }} ${{ inputs.ecr_repo_frontend }}:${{ inputs.preview_id }}
          docker push ${{ inputs.ecr_repo_frontend }}:${{ inputs.preview_id }}

      - name: Build and push backend image
        if: inputs.state == 'upsert'
        run: |
          cd backend
          # Extract repo name from full ECR URL
          REPO_NAME=$(echo "${{ inputs.ecr_repo_backend }}" | sed 's|.*/||')
          
          # Build image
          docker build -t $REPO_NAME:${{ inputs.preview_id }} .
          
          # Tag and push
          docker tag $REPO_NAME:${{ inputs.preview_id }} ${{ inputs.ecr_repo_backend }}:${{ inputs.preview_id }}
          docker push ${{ inputs.ecr_repo_backend }}:${{ inputs.preview_id }}

      - name: Install CDK dependencies
        run: |
          cd action
          pnpm install

      - name: Deploy preview environment
        if: inputs.state == 'upsert'
        run: |
          cd action
          
          # Set environment variables for the frontend
          PREVIEW_URL="https://${{ inputs.preview_id }}.${{ inputs.domain }}"
          
          pnpm cdk deploy \
            -c previewId="${{ inputs.preview_id }}" \
            -c clusterArn="${{ inputs.cluster_arn }}" \
            -c albListenerArn="${{ inputs.alb_listener_https_arn }}" \
            -c hostedZoneId="${{ inputs.hosted_zone_id }}" \
            -c domain="${{ inputs.domain }}" \
            -c ecrImageFrontend="${{ inputs.ecr_repo_frontend }}:${{ inputs.preview_id }}" \
            -c ecrImageBackend="${{ inputs.ecr_repo_backend }}:${{ inputs.preview_id }}" \
            -c cpu="${{ inputs.cpu }}" \
            -c memoryMiB="${{ inputs.memory }}" \
            -c frontendPort="${{ inputs.frontend_port }}" \
            -c backendPort="${{ inputs.backend_port }}" \
            -c apiPathPrefix="/api/*" \
            -c frontendHealthPath="/" \
            -c backendHealthPath="/healthz" \
            -c assignPublicIp="ENABLED" \
            --require-approval never
        env:
          AWS_REGION: ${{ inputs.aws_region }}

      - name: Destroy preview environment
        if: inputs.state == 'teardown'
        run: |
          cd action
          
          pnpm cdk destroy "Preview-${{ inputs.preview_id }}" --force
        env:
          AWS_REGION: ${{ inputs.aws_region }}

      - name: Comment PR with preview URL
        if: inputs.state == 'upsert' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = `https://${{ inputs.preview_id }}.${{ inputs.domain }}`;
            const comment = `ðŸš€ **Preview Environment Deployed!**
            
            Frontend: ${previewUrl}
            Backend API: ${previewUrl}/api/
            
            This preview environment will be automatically destroyed when the PR is closed.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });